{"version":3,"file":"index.js","sources":["../electron/index.ts"],"sourcesContent":["// Native\nimport { join } from 'path';\n\n// Packages\nimport {\n  BrowserWindow,\n  app,\n  ipcMain,\n  IpcMainEvent,\n  IpcMainInvokeEvent,\n  nativeTheme,\n  globalShortcut,\n  clipboard\n} from 'electron';\nimport isDev from 'electron-is-dev';\n\nconst height = 600;\nconst width = 800;\n\n// Function to capture selected text automatically\nasync function captureFromClipboard() {\n  try {\n    // Store current clipboard to restore later\n    const originalClipboard = clipboard.readText();\n\n    // Use AppleScript to copy selected text on macOS\n    if (process.platform === 'darwin') {\n      const { execSync } = require('child_process');\n\n      try {\n        // Execute Cmd+C using AppleScript\n        execSync(`osascript -e 'tell application \"System Events\" to keystroke \"c\" using command down'`);\n\n        // Wait a moment for clipboard to update\n        await new Promise((resolve) => setTimeout(resolve, 150));\n\n        const clipboardText = clipboard.readText();\n\n        // Check if we got new text (different from original)\n        if (clipboardText && clipboardText !== originalClipboard && clipboardText.trim().length > 5) {\n          const promptData = {\n            text: clipboardText.trim(),\n            url: 'External Application',\n            title: 'Auto-captured Text',\n            timestamp: new Date().toISOString(),\n            domain: 'external',\n            autoDetected: false\n          };\n\n          // eslint-disable-next-line no-console\n          console.log('Captured prompt from selected text:', promptData);\n\n          // Send captured prompt to any listening windows\n          const allWindows = BrowserWindow.getAllWindows();\n          allWindows.forEach((window) => {\n            window.webContents.send('prompt-captured', promptData);\n          });\n\n          // Show a notification that text was captured\n          showCaptureNotification(promptData.text);\n\n          return promptData;\n        } else if (originalClipboard && originalClipboard.trim().length > 5) {\n          // If no new selection, use existing clipboard content\n          const promptData = {\n            text: originalClipboard.trim(),\n            url: 'External Application',\n            title: 'Clipboard Content',\n            timestamp: new Date().toISOString(),\n            domain: 'external',\n            autoDetected: false\n          };\n\n          // eslint-disable-next-line no-console\n          console.log('Captured prompt from existing clipboard:', promptData);\n\n          // Send captured prompt to any listening windows\n          const allWindows = BrowserWindow.getAllWindows();\n          allWindows.forEach((window) => {\n            window.webContents.send('prompt-captured', promptData);\n          });\n\n          showCaptureNotification(promptData.text);\n          return promptData;\n        } else {\n          // eslint-disable-next-line no-console\n          console.log('No text selected. Please highlight some text first.');\n          showInstructionNotification();\n          return null;\n        }\n      } catch (applescriptError) {\n        // eslint-disable-next-line no-console\n        console.error('AppleScript execution failed:', applescriptError);\n\n        // Show permission instruction\n        showPermissionNotification();\n\n        // Fallback to existing clipboard\n        const clipboardText = clipboard.readText();\n        if (clipboardText && clipboardText.trim().length > 5) {\n          const promptData = {\n            text: clipboardText.trim(),\n            url: 'External Application',\n            title: 'Clipboard Fallback',\n            timestamp: new Date().toISOString(),\n            domain: 'external',\n            autoDetected: false\n          };\n\n          // eslint-disable-next-line no-console\n          console.log('Captured prompt from clipboard (fallback):', promptData);\n\n          const allWindows = BrowserWindow.getAllWindows();\n          allWindows.forEach((window) => {\n            window.webContents.send('prompt-captured', promptData);\n          });\n\n          showCaptureNotification(promptData.text);\n          return promptData;\n        }\n\n        showInstructionNotification();\n        return null;\n      }\n    } else {\n      // For Windows/Linux, try using clipboard directly\n      const clipboardText = clipboard.readText();\n      if (clipboardText && clipboardText.trim().length > 5) {\n        const promptData = {\n          text: clipboardText.trim(),\n          url: 'External Application',\n          title: 'Clipboard Capture',\n          timestamp: new Date().toISOString(),\n          domain: 'external',\n          autoDetected: false\n        };\n\n        // eslint-disable-next-line no-console\n        console.log('Captured prompt from clipboard:', promptData);\n\n        const allWindows = BrowserWindow.getAllWindows();\n        allWindows.forEach((window) => {\n          window.webContents.send('prompt-captured', promptData);\n        });\n\n        showCaptureNotification(promptData.text);\n        return promptData;\n      } else {\n        showInstructionNotification();\n        return null;\n      }\n    }\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Error during text capture:', error);\n    showInstructionNotification();\n    return null;\n  }\n}\n\n// Function to show capture notification\nfunction showCaptureNotification(text: string) {\n  const { Notification } = require('electron');\n\n  if (Notification.isSupported()) {\n    const notification = new Notification({\n      title: 'Prompt Captured!',\n      body: `\"${text.substring(0, 50)}${text.length > 50 ? '...' : ''}\"`\n    });\n\n    notification.show();\n  }\n}\n\n// Function to show permission notification\nfunction showPermissionNotification() {\n  const { Notification } = require('electron');\n\n  if (Notification.isSupported()) {\n    const notification = new Notification({\n      title: 'Enable Auto-Copy Feature',\n      body: 'Go to System Preferences → Security & Privacy → Accessibility and add this app to enable automatic text copying'\n    });\n\n    notification.show();\n  }\n}\n\n// Function to show instruction notification\nfunction showInstructionNotification() {\n  const { Notification } = require('electron');\n\n  if (Notification.isSupported()) {\n    const notification = new Notification({\n      title: 'Prompt Capture',\n      body: 'Copy text first (Cmd+C), then press Cmd+Shift+P to save it. Or enable Accessibility permissions for auto-copy.'\n    });\n\n    notification.show();\n  }\n}\n\n// Helper function to inject content script into any window\nasync function injectContentScriptIntoWindow(window: BrowserWindow) {\n  try {\n    await window.webContents.executeJavaScript(`\n      // Inject our prompt capture functionality\n      if (!window.promptCaptureInjected) {\n        window.promptCaptureInjected = true;\n        \n        // Create the content script functionality\n        ${getContentScriptCode()}\n      }\n    `);\n  } catch (error: unknown) {\n    // eslint-disable-next-line no-console\n    console.error('Failed to inject content script:', error);\n  }\n}\n\nfunction getContentScriptCode() {\n  return `\n    let isCaptureModeActive = false;\n    let captureOverlay = null;\n    let selectedText = '';\n    \n    // Listen for capture activation from global shortcut\n    window.addEventListener('keydown', (e) => {\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'P') {\n        e.preventDefault();\n        e.stopPropagation();\n        activateCaptureMode();\n      }\n      \n      // Escape to cancel capture mode\n      if (e.key === 'Escape' && isCaptureModeActive) {\n        deactivateCaptureMode();\n      }\n    });\n    \n    function activateCaptureMode() {\n      if (isCaptureModeActive) return;\n      \n      isCaptureModeActive = true;\n      document.body.style.cursor = 'crosshair';\n      createCaptureOverlay();\n      \n      // Show notification\n      showNotification('Prompt Capture Mode Active - Select text to capture');\n    }\n    \n    function deactivateCaptureMode() {\n      if (!isCaptureModeActive) return;\n      \n      isCaptureModeActive = false;\n      document.body.style.cursor = 'default';\n      removeCaptureOverlay();\n      hideNotification();\n    }\n    \n    function toggleCaptureMode() {\n      if (isCaptureModeActive) {\n        deactivateCaptureMode();\n      } else {\n        activateCaptureMode();\n      }\n    }\n    \n    function createCaptureOverlay() {\n      // Create overlay for selection\n      captureOverlay = document.createElement('div');\n      captureOverlay.style.cssText = \\`\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 10000;\n        pointer-events: none;\n        background: rgba(0, 123, 255, 0.05);\n        border: 2px dashed rgba(0, 123, 255, 0.3);\n        box-sizing: border-box;\n      \\`;\n      document.body.appendChild(captureOverlay);\n      \n      // Add text selection listener\n      document.addEventListener('mouseup', handleTextSelection);\n      document.addEventListener('selectstart', handleTextSelection);\n    }\n    \n    function showNotification(message) {\n      // Remove existing notification\n      const existing = document.querySelector('.prompt-capture-notification');\n      if (existing) existing.remove();\n      \n      const notification = document.createElement('div');\n      notification.className = 'prompt-capture-notification';\n      notification.style.cssText = \\`\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #007bff;\n        color: white;\n        padding: 12px 20px;\n        border-radius: 8px;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        font-size: 14px;\n        font-weight: 500;\n        z-index: 10002;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n        animation: slideIn 0.3s ease-out;\n      \\`;\n      \n      // Add CSS animation\n      if (!document.querySelector('#prompt-capture-styles')) {\n        const style = document.createElement('style');\n        style.id = 'prompt-capture-styles';\n        style.textContent = \\`\n          @keyframes slideIn {\n            from { transform: translateX(100%); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n          }\n          @keyframes slideOut {\n            from { transform: translateX(0); opacity: 1; }\n            to { transform: translateX(100%); opacity: 0; }\n          }\n        \\`;\n        document.head.appendChild(style);\n      }\n      \n      notification.textContent = message;\n      document.body.appendChild(notification);\n    }\n    \n    function hideNotification() {\n      const notification = document.querySelector('.prompt-capture-notification');\n      if (notification) {\n        notification.style.animation = 'slideOut 0.3s ease-in';\n        setTimeout(() => {\n          if (notification.parentNode) notification.remove();\n        }, 300);\n      }\n    }\n    \n    function removeCaptureOverlay() {\n      if (captureOverlay) {\n        document.body.removeChild(captureOverlay);\n        captureOverlay = null;\n      }\n      document.removeEventListener('mouseup', handleTextSelection);\n    }\n    \n    function handleTextSelection(e) {\n      if (!isCaptureModeActive) return;\n      \n      // Small delay to ensure selection is complete\n      setTimeout(() => {\n        const selection = window.getSelection();\n        const text = selection.toString().trim();\n        \n        if (text.length > 5) { // Minimum text length\n          selectedText = text;\n          showSaveDot(e.clientX, e.clientY);\n        }\n      }, 100);\n    }\n    \n    function showSaveDot(x, y) {\n      // Remove any existing dot\n      const existingDot = document.querySelector('.prompt-save-dot');\n      if (existingDot) existingDot.remove();\n      \n      // Ensure coordinates are within viewport\n      const maxX = window.innerWidth - 60;\n      const maxY = window.innerHeight - 60;\n      const adjustedX = Math.min(Math.max(x + 10, 10), maxX);\n      const adjustedY = Math.min(Math.max(y - 30, 10), maxY);\n      \n      // Create save button container\n      const container = document.createElement('div');\n      container.className = 'prompt-save-dot';\n      container.style.cssText = \\`\n        position: fixed;\n        left: \\${adjustedX}px;\n        top: \\${adjustedY}px;\n        z-index: 10001;\n        pointer-events: auto;\n        animation: popIn 0.3s ease-out;\n      \\`;\n      \n      // Create the save button\n      const button = document.createElement('button');\n      button.style.cssText = \\`\n        background: #007bff;\n        color: white;\n        border: none;\n        border-radius: 20px;\n        padding: 8px 16px;\n        font-size: 12px;\n        font-weight: 600;\n        cursor: pointer;\n        box-shadow: 0 4px 12px rgba(0, 123, 255, 0.4);\n        transition: all 0.2s ease;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        min-width: 80px;\n      \\`;\n      button.textContent = '💾 Save';\n      \n      // Add CSS for pop-in animation\n      if (!document.querySelector('#prompt-save-styles')) {\n        const style = document.createElement('style');\n        style.id = 'prompt-save-styles';\n        style.textContent = \\`\n          @keyframes popIn {\n            0% { transform: scale(0); opacity: 0; }\n            70% { transform: scale(1.1); }\n            100% { transform: scale(1); opacity: 1; }\n          }\n        \\`;\n        document.head.appendChild(style);\n      }\n      \n      button.addEventListener('mouseenter', () => {\n        button.style.transform = 'scale(1.05)';\n        button.style.background = '#0056b3';\n      });\n      \n      button.addEventListener('mouseleave', () => {\n        button.style.transform = 'scale(1)';\n        button.style.background = '#007bff';\n      });\n      \n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        savePrompt();\n        container.remove();\n        deactivateCaptureMode();\n        showNotification('Prompt saved successfully!');\n        setTimeout(hideNotification, 2000);\n      });\n      \n      container.appendChild(button);\n      document.body.appendChild(container);\n      \n      // Auto-remove dot after 15 seconds\n      setTimeout(() => {\n        if (container.parentNode) container.remove();\n      }, 15000);\n    }\n    \n    function savePrompt() {\n      const promptData = {\n        text: selectedText,\n        url: window.location.href,\n        title: document.title,\n        timestamp: new Date().toISOString(),\n        domain: window.location.hostname\n      };\n      \n      // Send to Electron main process\n      if (window.electronAPI) {\n        window.electronAPI.capturePrompt(promptData);\n      } else {\n        console.log('Captured prompt:', promptData);\n      }\n    }\n    \n    // Auto-detect AI websites and capture prompts\n    function detectAIWebsites() {\n      const aiDomains = ['claude.ai', 'gemini.google.com', 'chat.openai.com', 'bard.google.com'];\n      const currentDomain = window.location.hostname;\n      \n      if (aiDomains.some(domain => currentDomain.includes(domain))) {\n        // Auto-capture prompts on AI websites\n        observePromptSubmissions();\n      }\n    }\n    \n    function observePromptSubmissions() {\n      // Look for common prompt input patterns\n      const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (mutation.type === 'childList') {\n            // Look for new message elements that might contain prompts\n            const newNodes = Array.from(mutation.addedNodes);\n            newNodes.forEach(node => {\n              if (node.nodeType === Node.ELEMENT_NODE) {\n                checkForPromptContent(node);\n              }\n            });\n          }\n        });\n      });\n      \n      observer.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n    }\n    \n    function checkForPromptContent(element) {\n      // Look for user message patterns in AI chat interfaces\n      const userMessageSelectors = [\n        '[data-testid*=\"user\"]',\n        '.user-message',\n        '[role=\"user\"]',\n        '.human-message'\n      ];\n      \n      userMessageSelectors.forEach(selector => {\n        const messages = element.querySelectorAll ? element.querySelectorAll(selector) : [];\n        messages.forEach(msg => {\n          const text = msg.textContent || msg.innerText;\n          if (text && text.trim().length > 10) {\n            const promptData = {\n              text: text.trim(),\n              url: window.location.href,\n              title: document.title,\n              timestamp: new Date().toISOString(),\n              domain: window.location.hostname,\n              autoDetected: true\n            };\n            \n            if (window.electronAPI) {\n              window.electronAPI.capturePrompt(promptData);\n            } else {\n              console.log('Auto-captured prompt:', promptData);\n            }\n          }\n        });\n      });\n    }\n    \n    // Initialize\n    detectAIWebsites();\n  `;\n}\n\nfunction createWindow() {\n  // Create the browser window.\n  const window = new BrowserWindow({\n    width,\n    height,\n    //  change to false to use AppBar\n    frame: false,\n    show: true,\n    resizable: true,\n    fullscreenable: true,\n    webPreferences: {\n      preload: join(__dirname, 'preload.js'),\n      nodeIntegration: false,\n      contextIsolation: true,\n      webSecurity: false, // Allow cross-origin requests for content injection\n      allowRunningInsecureContent: true,\n      experimentalFeatures: true\n    }\n  });\n\n  // Enable web navigation to external sites\n  window.webContents.setWindowOpenHandler(() => {\n    // Allow opening external URLs in the same window\n    return { action: 'allow' };\n  });\n\n  const port = process.env.PORT || 3000;\n  const url = isDev ? `http://localhost:${port}` : join(__dirname, '../dist-vite/index.html');\n\n  // and load the index.html of the app.\n  if (isDev) {\n    window?.loadURL(url);\n  } else {\n    window?.loadFile(url);\n  }\n  // Open the DevTools.\n  // window.webContents.openDevTools();\n\n  // For AppBar\n  ipcMain.on('minimize', () => {\n    // eslint-disable-next-line no-unused-expressions\n    window.isMinimized() ? window.restore() : window.minimize();\n    // or alternatively: win.isVisible() ? win.hide() : win.show()\n  });\n  ipcMain.on('maximize', () => {\n    // eslint-disable-next-line no-unused-expressions\n    window.isMaximized() ? window.restore() : window.maximize();\n  });\n\n  ipcMain.on('close', () => {\n    window.close();\n  });\n\n  nativeTheme.themeSource = 'dark';\n\n  // Register global shortcut for prompt capture\n  globalShortcut.register('CommandOrControl+Shift+P', () => {\n    // eslint-disable-next-line no-console\n    console.log('Global shortcut triggered - capturing clipboard');\n\n    // Automatically capture from clipboard\n    captureFromClipboard();\n  });\n\n  // Auto-inject content script into all new web pages\n  window.webContents.on('did-finish-load', () => {\n    injectContentScriptIntoWindow(window);\n  });\n\n  window.webContents.on('did-navigate', () => {\n    injectContentScriptIntoWindow(window);\n  });\n\n  return window;\n}\n\nlet overlayWindow: BrowserWindow | null = null;\n\nfunction createOverlayWindow() {\n  overlayWindow = new BrowserWindow({\n    width: 500,\n    height: 250,\n    frame: false,\n    show: false,\n    alwaysOnTop: true,\n    transparent: true,\n    resizable: false,\n    skipTaskbar: true,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: join(__dirname, 'preload.js')\n    }\n  });\n\n  // Create a simple HTML file for the overlay\n  const overlayHTML = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      background: linear-gradient(135deg, rgba(0, 123, 255, 0.95), rgba(0, 86, 179, 0.95));\n      color: white;\n      padding: 25px;\n      border-radius: 15px;\n      backdrop-filter: blur(10px);\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n      height: 100vh;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n    }\n    \n    .close-btn {\n      position: absolute;\n      top: 15px;\n      right: 15px;\n      background: rgba(255, 255, 255, 0.2);\n      border: none;\n      color: white;\n      width: 30px;\n      height: 30px;\n      border-radius: 50%;\n      cursor: pointer;\n      font-size: 18px;\n      font-weight: bold;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .close-btn:hover {\n      background: rgba(255, 255, 255, 0.3);\n    }\n    \n    .title {\n      font-size: 22px;\n      font-weight: 700;\n      margin-bottom: 15px;\n      text-align: center;\n    }\n    \n    .instructions {\n      font-size: 14px;\n      margin-bottom: 20px;\n      text-align: center;\n      opacity: 0.95;\n      line-height: 1.5;\n    }\n    \n    .capture-area {\n      background: rgba(255, 255, 255, 0.15);\n      border: 2px dashed rgba(255, 255, 255, 0.4);\n      border-radius: 10px;\n      padding: 20px;\n      text-align: center;\n      cursor: text;\n      transition: all 0.3s ease;\n      min-height: 60px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .capture-area:hover {\n      background: rgba(255, 255, 255, 0.2);\n      border-color: rgba(255, 255, 255, 0.6);\n    }\n    \n    .capture-area:focus {\n      outline: none;\n      background: rgba(255, 255, 255, 0.25);\n      border-color: rgba(255, 255, 255, 0.8);\n    }\n  </style>\n</head>\n<body>\n  <button class=\"close-btn\" onclick=\"closeOverlay()\">&times;</button>\n  \n  <div class=\"title\">🎯 Prompt Capture</div>\n  \n  <div class=\"instructions\">\n    Select text anywhere on your screen, copy it (Cmd+C/Ctrl+C),<br>\n    then paste it below to save\n  </div>\n  \n  <div class=\"capture-area\" \n       contenteditable=\"true\" \n       id=\"captureArea\"\n       placeholder=\"Paste captured text here (Cmd+V)\">\n    Click here and paste your text...\n  </div>\n  \n  <script>\n    const captureArea = document.getElementById('captureArea');\n    let hasContent = false;\n    \n    function closeOverlay() {\n      if (window.electronAPI) {\n        window.electronAPI.closeOverlay();\n      }\n    }\n    \n    // Handle paste events\n    captureArea.addEventListener('paste', (e) => {\n      e.preventDefault();\n      const text = (e.clipboardData || window.clipboardData).getData('text');\n      \n      if (text && text.trim().length > 5) {\n        hasContent = true;\n        captureArea.innerHTML = '<div style=\"color: #90EE90; font-weight: bold;\">✓ Text captured successfully!</div>';\n        captureArea.style.background = 'rgba(144, 238, 144, 0.2)';\n        captureArea.style.borderColor = 'rgba(144, 238, 144, 0.6)';\n        \n        // Send to main process\n        if (window.electronAPI) {\n          window.electronAPI.capturePrompt({\n            text: text.trim(),\n            url: 'External Application',\n            title: 'Clipboard Capture',\n            timestamp: new Date().toISOString(),\n            domain: 'external',\n            autoDetected: false\n          });\n        }\n        \n        // Auto-close after success\n        setTimeout(() => {\n          closeOverlay();\n        }, 1500);\n      }\n    });\n    \n    // Focus and select all on click\n    captureArea.addEventListener('click', () => {\n      if (!hasContent) {\n        captureArea.innerHTML = '';\n      }\n      captureArea.focus();\n    });\n    \n    // Auto-focus when window opens\n    setTimeout(() => {\n      captureArea.focus();\n    }, 100);\n  </script>\n</body>\n</html>\n  `;\n\n  overlayWindow.loadURL('data:text/html;charset=utf-8,' + encodeURIComponent(overlayHTML));\n\n  overlayWindow.on('closed', () => {\n    overlayWindow = null;\n  });\n\n  return overlayWindow;\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow();\n\n  app.on('activate', () => {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n  });\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  // Unregister all global shortcuts\n  globalShortcut.unregisterAll();\n\n  if (process.platform !== 'darwin') app.quit();\n});\n\n// Cleanup shortcuts when app will quit\napp.on('will-quit', () => {\n  globalShortcut.unregisterAll();\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n\n// listen the channel `message` and resend the received message to the renderer process\nipcMain.on('message', (event: IpcMainEvent, message: string) => {\n  // eslint-disable-next-line no-console\n  console.log(message);\n  setTimeout(() => event.sender.send('message', 'common.hiElectron'), 500);\n});\n\n// Handle prompt capture\nipcMain.handle(\n  'capture-prompt',\n  async (\n    _event: IpcMainInvokeEvent,\n    promptData: { text: string; url: string; title: string; timestamp: string; domain: string; autoDetected?: boolean }\n  ) => {\n    // eslint-disable-next-line no-console\n    console.log('Captured prompt:', promptData);\n\n    // For now, just log to console as requested\n    // Later this can be saved to database/file\n    return { success: true, id: Date.now() };\n  }\n);\n\n// Handle content script injection for external websites\nipcMain.handle('inject-content-script', async () => {\n  const focusedWindow = BrowserWindow.getFocusedWindow();\n  if (!focusedWindow) return { success: false };\n\n  try {\n    await focusedWindow.webContents.executeJavaScript(`\n      // Inject our prompt capture functionality\n      if (!window.promptCaptureInjected) {\n        window.promptCaptureInjected = true;\n        \n        // Create the content script functionality\n        ${getContentScriptCode()}\n      }\n    `);\n    return { success: true };\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    // eslint-disable-next-line no-console\n    console.error('Failed to inject content script:', error);\n    return { success: false, error: errorMessage };\n  }\n});\n\n// Handle overlay window management\nipcMain.handle('close-overlay', async () => {\n  if (overlayWindow) {\n    overlayWindow.hide();\n  }\n  return { success: true };\n});\n\nipcMain.handle('show-overlay', async () => {\n  if (!overlayWindow) {\n    createOverlayWindow();\n  }\n\n  if (overlayWindow) {\n    overlayWindow.show();\n    overlayWindow.center();\n    overlayWindow.focus();\n  }\n  return { success: true };\n});\n"],"names":["clipboard","BrowserWindow","join","isDev","app","ipcMain"],"mappings":"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"}